{"ast":null,"code":"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Operatorhtml from './operator.html';\nimport store from '../../../store/store';\nimport toastr from 'toastr';\nimport socketIOClient from \"socket.io-client\";\nimport { getDoc, toggleStatus } from '../../../actions/doctors';\nvar socket;\n\nclass Operator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDoc = (index, key) => {\n      store.dispatch(toggleStatus(this.state.doctorsList[index]._id, {\n        fn: this.syncList,\n        scope: this\n      }));\n    };\n\n    this.syncList = data => {\n      if (data.status === 200) {\n        toastr.success(\"status change successfull\");\n      } else {\n        toastr.error(\"status change unsuccessfull\");\n      }\n\n      store.dispatch(getDoc({\n        fn: this.processDoc,\n        scope: this\n      }));\n    };\n\n    this.toggle = (e, key) => {\n      if (key.toLowerCase() === 'online') {\n        this.setState({\n          status: 'Online'\n        });\n      } else {\n        this.setState({\n          status: 'Offline'\n        });\n      }\n    };\n\n    this.processDoc = docList => {\n      this.setState({\n        doctorsList: docList.data\n      });\n    };\n\n    this.disconnect = val => {\n      socket.emit('disconnect-patient', val.id);\n      console.log(val);\n    };\n\n    this.connect = val => {\n      socket.emit('connect-to-doctor', val.id);\n      console.log(val);\n    };\n\n    this.renderData = () => {\n      console.log(this.state.data);\n      return null;\n    };\n\n    this.state = {\n      endpoint: 'http://localhost:3002',\n      status: 'Offline',\n      doctorsList: []\n    };\n  }\n\n  componentDidMount() {\n    store.dispatch(getDoc({\n      fn: this.processDoc,\n      scope: this\n    }));\n    socket = socketIOClient(this.state.endpoint, {\n      query: `operator=${this.props.authenticate ? this.props.authenticate.info.name : 'test'}`\n    });\n    socket.on('patients', patients => {\n      this.setState({\n        data: patients\n      });\n    });\n    console.log(this.state.patients);\n  }\n\n  render() {\n    return Operatorhtml.call(this);\n  }\n\n}\n\nconst matchStateToProps = state => ({\n  authenticate: state.authenticate\n});\n\nexport default withRouter(connect(matchStateToProps)(Operator));","map":{"version":3,"sources":["/Users/adityarola/Downloads/covidclinicreact/src/modules/user/operator/operator.js"],"names":["Component","connect","withRouter","Operatorhtml","store","toastr","socketIOClient","getDoc","toggleStatus","socket","Operator","constructor","props","toggleDoc","index","key","dispatch","state","doctorsList","_id","fn","syncList","scope","data","status","success","error","processDoc","toggle","e","toLowerCase","setState","docList","disconnect","val","emit","id","console","log","renderData","endpoint","componentDidMount","query","authenticate","info","name","on","patients","render","call","matchStateToProps"],"mappings":"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","sourcesContent":["import {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from 'react-router'\nimport Operatorhtml from './operator.html'\nimport store from '../../../store/store'\nimport toastr from 'toastr'\nimport socketIOClient from \"socket.io-client\";\nimport { getDoc,toggleStatus } from '../../../actions/doctors';\n\n\n\n\nvar socket;\nclass Operator extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            endpoint:'http://localhost:3002',\n            status : 'Offline',\n            doctorsList :[]\n        }\n         \n    }\n\n    toggleDoc = (index,key)=>{\n        store.dispatch(toggleStatus(this.state.doctorsList[index]._id,{fn:this.syncList,scope:this}))\n    }\n\n    syncList = (data)=>{\n        if(data.status === 200){\n            toastr.success(\"status change successfull\");\n        }else{\n            toastr.error(\"status change unsuccessfull\");\n        }\n        store.dispatch(getDoc({fn:this.processDoc,scope:this}))\n    }\n\n    toggle = (e,key)=>{\n        if(key.toLowerCase() === 'online'){\n            this.setState({status:'Online'});\n        }else{\n            this.setState({status:'Offline'});\n        }\n    }\n\n    processDoc = (docList) =>{\n        this.setState({doctorsList:docList.data});\n    }\n\n    disconnect = (val) =>{\n        socket.emit('disconnect-patient', val.id)\n        console.log(val);\n    }\n\n    connect = (val) =>{\n        socket.emit('connect-to-doctor', val.id)\n        console.log(val);\n    }\n\n    renderData= ()=>{\n        console.log(this.state.data);\n        return null;\n    }\n\n    componentDidMount(){\n        store.dispatch(getDoc({fn:this.processDoc,scope:this}))\n        socket = socketIOClient(this.state.endpoint,{query: `operator=${this.props.authenticate?this.props.authenticate.info.name:'test'}`});\n        socket.on('patients',patients => {this.setState({data:patients})});\n        console.log(this.state.patients)\n\n    }\n\n    render(){\n        return Operatorhtml.call(this);\n    }\n\n\n}\n\n\nconst matchStateToProps = state => ({\n    authenticate : state.authenticate\n})\n\nexport default withRouter(connect(matchStateToProps)(Operator))\n"]},"metadata":{},"sourceType":"module"}