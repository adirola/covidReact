{"ast":null,"code":"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Operatorhtml from './operator.html';\nimport store from '../../../store/store';\nimport socketIOClient from \"socket.io-client\";\nimport { getDoc, toggleStatus } from '../../../actions/doctors';\nvar socket;\n\nclass Operator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDoc = (index, key) => {\n      store.dispatch(toggleStatus(this.state.doctorsList[index]._id, {\n        fn: this.syncList,\n        scope: this\n      }));\n    };\n\n    this.syncList = data => {\n      console.log(data);\n      store.dispatch(getDoc({\n        fn: this.processDoc,\n        scope: this\n      }));\n    };\n\n    this.toggle = (e, key) => {\n      if (key.toLowerCase() === 'online') {\n        this.setState({\n          status: 'Online'\n        });\n      } else {\n        this.setState({\n          status: 'Offline'\n        });\n      }\n    };\n\n    this.processDoc = docList => {\n      this.setState({\n        doctorsList: docList.data\n      });\n    };\n\n    this.disconnect = val => {\n      socket.emit('disconnect-patient', val.id);\n      console.log(val);\n    };\n\n    this.connect = val => {\n      socket.emit('connect-to-doctor', val.id);\n      console.log(val);\n    };\n\n    this.renderData = () => {\n      console.log(this.state.data);\n      return null;\n    };\n\n    this.state = {\n      endpoint: 'http://localhost:3002',\n      status: 'Offline',\n      doctorsList: []\n    };\n  }\n\n  componentDidMount() {\n    store.dispatch(getDoc({\n      fn: this.processDoc,\n      scope: this\n    })); //socket = socketIOClient(this.state.endpoint,{query: `operator=${this.props.authenticate?this.props.authenticate.info.name:'test'}`});\n\n    socket.on('patients', patients => {\n      this.setState({\n        data: patients\n      });\n    });\n  }\n\n  render() {\n    return Operatorhtml.call(this);\n  }\n\n}\n\nconst matchStateToProps = state => ({\n  authenticate: state.authenticate\n});\n\nexport default withRouter(connect(matchStateToProps)(Operator));","map":{"version":3,"sources":["/Users/adityarola/Downloads/covidclinicreact/src/modules/user/operator/operator.js"],"names":["Component","connect","withRouter","Operatorhtml","store","socketIOClient","getDoc","toggleStatus","socket","Operator","constructor","props","toggleDoc","index","key","dispatch","state","doctorsList","_id","fn","syncList","scope","data","console","log","processDoc","toggle","e","toLowerCase","setState","status","docList","disconnect","val","emit","id","renderData","endpoint","componentDidMount","on","patients","render","call","matchStateToProps","authenticate"],"mappings":"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","sourcesContent":["import {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from 'react-router'\nimport Operatorhtml from './operator.html'\nimport store from '../../../store/store'\n\nimport socketIOClient from \"socket.io-client\";\nimport { getDoc,toggleStatus } from '../../../actions/doctors';\n\n\n\n\nvar socket;\nclass Operator extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            endpoint:'http://localhost:3002',\n            status : 'Offline',\n            doctorsList :[]\n        }\n         \n    }\n\n    toggleDoc = (index,key)=>{\n        store.dispatch(toggleStatus(this.state.doctorsList[index]._id,{fn:this.syncList,scope:this}))\n    }\n\n    syncList = (data)=>{\n        console.log(data)\n        store.dispatch(getDoc({fn:this.processDoc,scope:this}))\n    }\n\n    toggle = (e,key)=>{\n        if(key.toLowerCase() === 'online'){\n            this.setState({status:'Online'});\n        }else{\n            this.setState({status:'Offline'});\n        }\n    }\n\n    processDoc = (docList) =>{\n        this.setState({doctorsList:docList.data});\n    }\n\n    disconnect = (val) =>{\n        socket.emit('disconnect-patient', val.id)\n        console.log(val);\n    }\n\n    connect = (val) =>{\n        socket.emit('connect-to-doctor', val.id)\n        console.log(val);\n    }\n\n    renderData= ()=>{\n        console.log(this.state.data);\n        return null;\n    }\n\n    componentDidMount(){\n        store.dispatch(getDoc({fn:this.processDoc,scope:this}))\n        //socket = socketIOClient(this.state.endpoint,{query: `operator=${this.props.authenticate?this.props.authenticate.info.name:'test'}`});\n        socket.on('patients',patients => {this.setState({data:patients})});\n\n    }\n\n    render(){\n        return Operatorhtml.call(this);\n    }\n\n\n}\n\n\nconst matchStateToProps = state => ({\n    authenticate : state.authenticate\n})\n\nexport default withRouter(connect(matchStateToProps)(Operator))\n"]},"metadata":{},"sourceType":"module"}