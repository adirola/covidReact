{"ast":null,"code":"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Patienthtml from './patient.html';\nimport store from '../../../store/store';\nimport toastr from 'toastr';\nimport { Env } from '../../../api.config';\nimport socketIOClient from \"socket.io-client\";\nvar socket;\n\nclass Patient extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getParams = query => {\n      if (!query) {\n        return {};\n      }\n\n      return (/^[?#]/.test(query) ? query.slice(1) : query).split('&').reduce((params, param) => {\n        let [key, value] = param.split('=');\n        params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\n        return params;\n      }, {});\n    };\n\n    this.openAppointment = () => {\n      if (this.state.iframeUrl === '') {\n        toastr.error(\"No url available\");\n      } else {\n        window.open(this.state.iframeUrl, '_blank');\n      }\n    };\n\n    this.scheduleAppointment = () => {\n      let params = this.getParams('?id=' + this.props.authenticate.info.data.id);\n      var i = 0;\n\n      if (!params || !params.id) {\n        return;\n      }\n\n      this.id = params.id;\n\n      try {\n        socket = socketIOClient(this.state.endpoint, {\n          query: `patient=${params.id}`\n        });\n        toastr.success(\"Request Sent Successfully\");\n      } catch (err) {\n        toastr.error(\"Request Unsuccessfull\");\n      }\n\n      socket.on('update', data => {\n        console.log(typeof data);\n\n        if (typeof data === 'string') {\n          if (data.toLowerCase() === 'doctors not free') toastr.error(\"No Doctor available\");\n        } else {\n          while (i < 1) {\n            toastr.success(\"Appointment Scheduled\");\n            ++i;\n          }\n\n          this.setState({\n            info: data\n          });\n        }\n      });\n      socket.on('connect', _ => {\n        console.log(`Connected.`);\n      });\n      socket.on('redirect', data => {\n        this.setState({\n          iframeUrl: data.url\n        });\n      });\n      socket.on('disconnect', function () {\n        console.log('you have been disconnected');\n      });\n      socket.on('reconnect', function () {\n        console.log('you have been reconnected');\n      });\n      socket.on('reconnect_error', function () {\n        console.log('attempt to reconnect has failed');\n      });\n    };\n\n    this.state = {\n      endpoint: Env.getSocketUrl(),\n      info: {},\n      iframeUrl: ''\n    };\n  }\n\n  render() {\n    return Patienthtml.call(this);\n  }\n\n}\n\nconst matchStateToProps = state => ({\n  authenticate: state.authenticate\n});\n\nexport default withRouter(connect(matchStateToProps)(Patient));","map":{"version":3,"sources":["/Users/adityarola/Downloads/covidclinicreact/src/modules/user/patient/patient.js"],"names":["Component","connect","withRouter","Patienthtml","store","toastr","Env","socketIOClient","socket","Patient","constructor","props","getParams","query","test","slice","split","reduce","params","param","key","value","decodeURIComponent","replace","openAppointment","state","iframeUrl","error","window","open","scheduleAppointment","authenticate","info","data","id","i","endpoint","success","err","on","console","log","toLowerCase","setState","_","url","getSocketUrl","render","call","matchStateToProps"],"mappings":"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","sourcesContent":["import {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from 'react-router'\nimport Patienthtml from './patient.html'\nimport store from '../../../store/store'\nimport toastr from 'toastr';\nimport { Env } from '../../../api.config';\n\nimport socketIOClient from \"socket.io-client\";\n\nvar socket;\nclass Patient extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            endpoint:Env.getSocketUrl(),\n            info : {},\n            iframeUrl:''\n        }\n    }\n\n    getParams = (query) =>{\n        if (!query) {\n            return { };\n        }\n    \n        return (/^[?#]/.test(query) ? query.slice(1) : query)\n        .split('&')\n        .reduce((params, param) => {\n            let [ key, value ] = param.split('=');\n            params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\n            return params;\n        }, { });\n    }\n\n    openAppointment= () =>{\n        if(this.state.iframeUrl === ''){\n            toastr.error(\"No url available\")\n        }else{\n            window.open(this.state.iframeUrl,'_blank');\n        }\n    }\n\n    scheduleAppointment = () =>{\n        let params = this.getParams('?id='+this.props.authenticate.info.data.id);\n        var i = 0\n        if (!params || !params.id) {\n            return;\n        }\n        this.id = params.id;\n        try{\n            socket = socketIOClient(this.state.endpoint,{query: `patient=${params.id}`});\n            toastr.success(\"Request Sent Successfully\")\n        }catch(err){\n            toastr.error(\"Request Unsuccessfull\")\n        }\n        socket.on('update', data => {\n\n            console.log(typeof data);\n            if(typeof data === 'string'){\n                if(data.toLowerCase() ==='doctors not free')\n                toastr.error(\"No Doctor available\")\n            }else{\n                while(i<1){\n                    toastr.success(\"Appointment Scheduled\")\n                    ++i\n                }\n                this.setState({info:data})\n            }\n        });\n        socket.on('connect', _ => {\n            console.log(`Connected.`);\n        });\n\n        socket.on('redirect', data => {\n            this.setState({iframeUrl:data.url});\n        });\n\n        socket.on('disconnect', function () {\n            console.log('you have been disconnected');\n        });\n\n        socket.on('reconnect', function () {\n            console.log('you have been reconnected');\n        });\n\n        socket.on('reconnect_error', function () {\n            console.log('attempt to reconnect has failed');\n        });\n        \n    }\n\n    render(){\n        return Patienthtml.call(this);\n    }\n\n\n}\n\n\nconst matchStateToProps = state => ({\n    authenticate : state.authenticate\n})\n\nexport default withRouter(connect(matchStateToProps)(Patient))\n"]},"metadata":{},"sourceType":"module"}