{"ast":null,"code":"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Operatorhtml from './operator.html';\nimport store from '../../../store/store';\nimport toastr from 'toastr';\nimport socketIOClient from \"socket.io-client\";\nimport { getDoc, toggleStatus } from '../../../actions/doctors';\nimport { Env } from '../../../api.config';\nvar socket;\n\nclass Operator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDoc = (index, key) => {\n      store.dispatch(toggleStatus(this.state.doctorsList[index]._id, {\n        fn: this.syncList,\n        scope: this\n      }));\n    };\n\n    this.syncList = data => {\n      if (data.status === 200) {\n        toastr.success(\"status change successfull\");\n      } else {\n        toastr.error(\"status change unsuccessfull\");\n      }\n\n      store.dispatch(getDoc({\n        fn: this.processDoc,\n        scope: this\n      }));\n    };\n\n    this.toggle = (e, key) => {\n      if (key.toLowerCase() === 'online') {\n        this.setState({\n          status: 'Online'\n        });\n      } else {\n        this.setState({\n          status: 'Offline'\n        });\n      }\n    };\n\n    this.processDoc = docList => {\n      this.setState({\n        doctorsList: docList.data\n      });\n    };\n\n    this.disconnect = val => {\n      socket.emit('disconnect-patient', val._id);\n    };\n\n    this.connect = val => {\n      socket.emit('connect-to-doctor', val._id);\n    };\n\n    this.state = {\n      endpoint: Env.getSocketUrl,\n      status: 'Offline',\n      doctorsList: []\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props.authenticate.info);\n    store.dispatch(getDoc({\n      fn: this.processDoc,\n      scope: this\n    }));\n    socket = socketIOClient(this.state.endpoint, {\n      query: `operator=${this.props.authenticate && this.props.authenticate.info ? this.props.authenticate.info.data.name : 'test'}`\n    });\n    socket.on('patients', patients => {\n      this.setState({\n        data: patients\n      });\n    });\n    console.log(this.state.data);\n  }\n\n  render() {\n    return Operatorhtml.call(this);\n  }\n\n}\n\nconst matchStateToProps = state => ({\n  authenticate: state.authenticate\n});\n\nexport default withRouter(connect(matchStateToProps)(Operator));","map":{"version":3,"sources":["/Users/adityarola/Downloads/covidclinicreact/src/modules/user/operator/operator.js"],"names":["Component","connect","withRouter","Operatorhtml","store","toastr","socketIOClient","getDoc","toggleStatus","Env","socket","Operator","constructor","props","toggleDoc","index","key","dispatch","state","doctorsList","_id","fn","syncList","scope","data","status","success","error","processDoc","toggle","e","toLowerCase","setState","docList","disconnect","val","emit","endpoint","getSocketUrl","componentDidMount","console","log","authenticate","info","query","name","on","patients","render","call","matchStateToProps"],"mappings":"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","sourcesContent":["import {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from 'react-router'\nimport Operatorhtml from './operator.html'\nimport store from '../../../store/store'\nimport toastr from 'toastr'\nimport socketIOClient from \"socket.io-client\";\nimport { getDoc,toggleStatus } from '../../../actions/doctors';\nimport { Env } from '../../../api.config';\n\n\n\n\nvar socket;\nclass Operator extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            endpoint:Env.getSocketUrl,\n            status : 'Offline',\n            doctorsList :[]\n        }\n         \n    }\n\n    toggleDoc = (index,key)=>{\n        store.dispatch(toggleStatus(this.state.doctorsList[index]._id,{fn:this.syncList,scope:this}))\n    }\n\n    syncList = (data)=>{\n        if(data.status === 200){\n            toastr.success(\"status change successfull\");\n        }else{\n            toastr.error(\"status change unsuccessfull\");\n        }\n        store.dispatch(getDoc({fn:this.processDoc,scope:this}))\n    }\n\n    toggle = (e,key)=>{\n        if(key.toLowerCase() === 'online'){\n            this.setState({status:'Online'});\n        }else{\n            this.setState({status:'Offline'});\n        }\n    }\n\n    processDoc = (docList) =>{\n        this.setState({doctorsList:docList.data});\n    }\n\n    disconnect = (val) =>{\n        socket.emit('disconnect-patient', val._id)\n    }\n\n    connect = (val) =>{\n        socket.emit('connect-to-doctor', val._id)\n    }\n\n    componentDidMount(){\n        console.log(this.props.authenticate.info);\n        store.dispatch(getDoc({fn:this.processDoc,scope:this}))\n        socket = socketIOClient(this.state.endpoint,{query: `operator=${this.props.authenticate&&this.props.authenticate.info ?this.props.authenticate.info.data.name:'test'}`});\n        socket.on('patients',patients => {this.setState({data:patients})});\n        console.log(this.state.data)\n\n    }\n\n    render(){\n        return Operatorhtml.call(this);\n    }\n\n\n}\n\n\nconst matchStateToProps = state => ({\n    authenticate : state.authenticate\n})\n\nexport default withRouter(connect(matchStateToProps)(Operator))\n"]},"metadata":{},"sourceType":"module"}