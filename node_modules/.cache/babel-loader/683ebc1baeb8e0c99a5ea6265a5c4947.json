{"ast":null,"code":"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport RegisterHtml from './register.html';\nimport store from '../../../store/store';\nimport toastr from 'toastr';\nimport { register } from '../../../actions/user';\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.afterRegister = data => {\n      if (data.status === 201) {\n        toastr.success(\"user created successfully\");\n        this.props.history.push('/');\n      } else {\n        toastr.error(\"user creation failed\");\n      }\n    };\n\n    this.registerUser = e => {\n      e.preventDefault();\n\n      if (this.state.username === '' || this.state.password === '' || this.state.firstName === '' || this.state.lastName === '' || this.state.email === '') {\n        toastr.error(\"Please enter the required details\");\n      } else if (this.state.username.trim() === '' || this.state.password.trim() === '' || this.state.firstName.trim() === '' || this.state.lastName.trim() === '' || this.state.email.trim() === '') {\n        toastr.error(\"Please enter the required details\");\n      }\n\n      store.dispatch(register({\n        name: this.state.firstName + '' + this.state.lastName,\n        email: this.state.email,\n        password: this.state.password\n      }, {\n        fn: this.afterRegister,\n        scope: this\n      }));\n    };\n\n    this.state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      username: '',\n      password: ''\n    };\n  }\n\n  render() {\n    return RegisterHtml.call(this);\n  }\n\n}\n\nconst matchStateToProps = state => ({\n  authenticate: state.authenticate\n});\n\nexport default withRouter(connect(matchStateToProps)(Register));","map":{"version":3,"sources":["/Users/adityarola/Downloads/covidclinicreact/src/modules/user/register/register.js"],"names":["Component","connect","withRouter","RegisterHtml","store","toastr","register","Register","constructor","props","afterRegister","data","status","success","history","push","error","registerUser","e","preventDefault","state","username","password","firstName","lastName","email","trim","dispatch","name","fn","scope","render","call","matchStateToProps","authenticate"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAAQC,QAAR,QAAuB,uBAAvB;;AAGA,MAAMC,QAAN,SAAuBP,SAAvB,CAAiC;AAC7BQ,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAWlBC,aAXkB,GAWDC,IAAD,IAAS;AACrB,UAAGA,IAAI,CAACC,MAAL,KAAgB,GAAnB,EAAuB;AACnBP,QAAAA,MAAM,CAACQ,OAAP,CAAe,2BAAf;AACA,aAAKJ,KAAL,CAAWK,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH,OAHD,MAGK;AACDV,QAAAA,MAAM,CAACW,KAAP,CAAa,sBAAb;AACH;AAEJ,KAnBiB;;AAAA,SAqBlBC,YArBkB,GAqBFC,CAAD,IAAK;AAChBA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAG,KAAKC,KAAL,CAAWC,QAAX,KAAwB,EAAxB,IAA8B,KAAKD,KAAL,CAAWE,QAAX,KAAwB,EAAtD,IAA4D,KAAKF,KAAL,CAAWG,SAAX,KAAyB,EAArF,IAA2F,KAAKH,KAAL,CAAWI,QAAX,KAAwB,EAAnH,IAAwH,KAAKJ,KAAL,CAAWK,KAAX,KAAqB,EAAhJ,EAAoJ;AAChJpB,QAAAA,MAAM,CAACW,KAAP,CAAa,mCAAb;AACH,OAFD,MAEM,IAAG,KAAKI,KAAL,CAAWC,QAAX,CAAoBK,IAApB,OAA+B,EAA/B,IAAqC,KAAKN,KAAL,CAAWE,QAAX,CAAoBI,IAApB,OAA+B,EAApE,IAAyE,KAAKN,KAAL,CAAWG,SAAX,CAAqBG,IAArB,OAAgC,EAAzG,IAA6G,KAAKN,KAAL,CAAWI,QAAX,CAAoBE,IAApB,OAA+B,EAA5I,IAAgJ,KAAKN,KAAL,CAAWK,KAAX,CAAiBC,IAAjB,OAA4B,EAA/K,EAAkL;AACpLrB,QAAAA,MAAM,CAACW,KAAP,CAAa,mCAAb;AACH;;AAEDZ,MAAAA,KAAK,CAACuB,QAAN,CAAerB,QAAQ,CAAC;AAACsB,QAAAA,IAAI,EAAC,KAAKR,KAAL,CAAWG,SAAX,GAAuB,EAAvB,GAA4B,KAAKH,KAAL,CAAWI,QAA7C;AAAuDC,QAAAA,KAAK,EAAC,KAAKL,KAAL,CAAWK,KAAxE;AAA8EH,QAAAA,QAAQ,EAAC,KAAKF,KAAL,CAAWE;AAAlG,OAAD,EAA6G;AAACO,QAAAA,EAAE,EAAC,KAAKnB,aAAT;AAAuBoB,QAAAA,KAAK,EAAC;AAA7B,OAA7G,CAAvB;AAEH,KA/BiB;;AAEd,SAAKV,KAAL,GAAa;AACTG,MAAAA,SAAS,EAAC,EADD;AAETC,MAAAA,QAAQ,EAAC,EAFA;AAGTC,MAAAA,KAAK,EAAC,EAHG;AAITJ,MAAAA,QAAQ,EAAC,EAJA;AAKTC,MAAAA,QAAQ,EAAC;AALA,KAAb;AAOH;;AAyBDS,EAAAA,MAAM,GAAE;AACJ,WAAO5B,YAAY,CAAC6B,IAAb,CAAkB,IAAlB,CAAP;AACH;;AArC4B;;AAuCjC,MAAMC,iBAAiB,GAAGb,KAAK,KAAK;AAChCc,EAAAA,YAAY,EAAGd,KAAK,CAACc;AADW,CAAL,CAA/B;;AAIA,eAAehC,UAAU,CAACD,OAAO,CAACgC,iBAAD,CAAP,CAA2B1B,QAA3B,CAAD,CAAzB","sourcesContent":["import {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from 'react-router'\nimport RegisterHtml from './register.html'\nimport store from '../../../store/store'\nimport toastr from 'toastr'\n\nimport {register} from '../../../actions/user';\n\n\nclass Register extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            firstName:'',\n            lastName:'',\n            email:'',\n            username:'',\n            password:'',\n        }\n    }\n\n    afterRegister = (data) =>{\n        if(data.status === 201){\n            toastr.success(\"user created successfully\")\n            this.props.history.push('/')\n        }else{\n            toastr.error(\"user creation failed\")\n        }\n        \n    }\n\n    registerUser = (e)=>{\n        e.preventDefault();\n        if(this.state.username === '' || this.state.password === '' || this.state.firstName === '' || this.state.lastName === '' ||this.state.email === '' ){\n            toastr.error(\"Please enter the required details\");\n        }else if(this.state.username.trim() === '' || this.state.password.trim() === ''|| this.state.firstName.trim() === ''||this.state.lastName.trim() === ''||this.state.email.trim() === ''){\n            toastr.error(\"Please enter the required details\");\n        }\n\n        store.dispatch(register({name:this.state.firstName + '' + this.state.lastName, email:this.state.email,password:this.state.password},{fn:this.afterRegister,scope:this}));\n\n    }\n\n\n    render(){\n        return RegisterHtml.call(this);\n    }\n}\nconst matchStateToProps = state => ({\n    authenticate : state.authenticate\n})\n\nexport default withRouter(connect(matchStateToProps)(Register))\n"]},"metadata":{},"sourceType":"module"}