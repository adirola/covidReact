{"ast":null,"code":"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Operatorhtml from './operator.html';\nimport store from '../../../store/store';\nimport socketIOClient from \"socket.io-client\";\nimport { getDoc } from '../../../actions/doctors';\nvar socket;\n\nclass Operator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDoc = (index, key) => {\n      let list = this.state.doctorsList;\n      list[index].status = !list[index].status;\n      this.setState({\n        doctorsList: list\n      });\n    };\n\n    this.toggle = (e, key) => {\n      if (key.toLowerCase() === 'online') {\n        this.setState({\n          status: 'Online'\n        });\n      } else {\n        this.setState({\n          status: 'Offline'\n        });\n      }\n    };\n\n    this.processDoc = docList => {\n      this.setState({\n        doctorsList: docList.data\n      });\n    };\n\n    this.disconnect = val => {\n      socket.emit('disconnect-patient', val.id);\n      console.log(val);\n    };\n\n    this.connect = val => {\n      socket.emit('connect-to-doctor', val.id);\n      console.log(val);\n    };\n\n    this.renderData = () => {\n      console.log(this.state.data);\n      return null;\n    };\n\n    this.state = {\n      endpoint: 'http://localhost:3002',\n      status: 'Offline',\n      doctorsList: [{\n        id: '101',\n        name: 'Dr Test 1',\n        status: true\n      }]\n    };\n  }\n\n  componentDidMount() {\n    store.dispatch(getDoc({\n      fn: this.processDoc,\n      scope: this\n    }));\n    socket = socketIOClient(this.state.endpoint, {\n      query: `operator=${this.props.authenticate ? this.props.authenticate.info.name : 'test'}`\n    });\n    socket.on('patients', patients => {\n      this.setState({\n        data: patients\n      });\n    });\n  }\n\n  render() {\n    return Operatorhtml.call(this);\n  }\n\n}\n\nconst matchStateToProps = state => ({\n  authenticate: state.authenticate\n});\n\nexport default withRouter(connect(matchStateToProps)(Operator));","map":{"version":3,"sources":["/Users/adityarola/Downloads/covidclinicreact/src/modules/user/operator/operator.js"],"names":["Component","connect","withRouter","Operatorhtml","store","socketIOClient","getDoc","socket","Operator","constructor","props","toggleDoc","index","key","list","state","doctorsList","status","setState","toggle","e","toLowerCase","processDoc","docList","data","disconnect","val","emit","id","console","log","renderData","endpoint","name","componentDidMount","dispatch","fn","scope","query","authenticate","info","on","patients","render","call","matchStateToProps"],"mappings":"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","sourcesContent":["import {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from 'react-router'\nimport Operatorhtml from './operator.html'\nimport store from '../../../store/store'\n\nimport socketIOClient from \"socket.io-client\";\nimport { getDoc } from '../../../actions/doctors';\n\n\n\n\nvar socket;\nclass Operator extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            endpoint:'http://localhost:3002',\n            status : 'Offline',\n            doctorsList :[\n                {\n                    id:'101',\n                    name: 'Dr Test 1',\n                    status: true\n                }\n            ]\n        }\n         \n    }\n\n    toggleDoc = (index,key)=>{\n        let list = this.state.doctorsList;\n        list[index].status = !list[index].status;\n        this.setState({doctorsList:list});\n        \n    }\n\n    toggle = (e,key)=>{\n        if(key.toLowerCase() === 'online'){\n            this.setState({status:'Online'});\n        }else{\n            this.setState({status:'Offline'});\n        }\n    }\n\n    processDoc = (docList) =>{\n        this.setState({doctorsList:docList.data});\n    }\n\n    disconnect = (val) =>{\n        socket.emit('disconnect-patient', val.id)\n        console.log(val);\n    }\n\n    connect = (val) =>{\n        socket.emit('connect-to-doctor', val.id)\n        console.log(val);\n    }\n\n    renderData= ()=>{\n        console.log(this.state.data);\n        return null;\n    }\n\n    componentDidMount(){\n        store.dispatch(getDoc({fn:this.processDoc,scope:this}))\n        socket = socketIOClient(this.state.endpoint,{query: `operator=${this.props.authenticate?this.props.authenticate.info.name:'test'}`});\n        socket.on('patients',patients => {this.setState({data:patients})});\n\n    }\n\n    render(){\n        return Operatorhtml.call(this);\n    }\n\n\n}\n\n\nconst matchStateToProps = state => ({\n    authenticate : state.authenticate\n})\n\nexport default withRouter(connect(matchStateToProps)(Operator))\n"]},"metadata":{},"sourceType":"module"}