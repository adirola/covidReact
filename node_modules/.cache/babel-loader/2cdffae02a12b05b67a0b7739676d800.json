{"ast":null,"code":"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Patienthtml from './patient.html';\nimport store from '../../../store/store';\nimport socketIOClient from \"socket.io-client\";\nvar socket;\n\nclass Patient extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getParams = query => {\n      if (!query) {\n        return {};\n      }\n\n      return (/^[?#]/.test(query) ? query.slice(1) : query).split('&').reduce((params, param) => {\n        let [key, value] = param.split('=');\n        params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\n        return params;\n      }, {});\n    };\n\n    this.scheduleAppointment = () => {\n      let params = this.getParams('?id=100');\n\n      if (!params || !params.id) {\n        return;\n      }\n\n      this.id = params.id;\n      socket = socketIOClient(this.state.endpoint, {\n        query: `patient=${params.id}`\n      });\n      socket.on('update', data => {\n        this.info = data;\n      });\n      socket.on('connect', _ => {\n        console.log(`Connected.`);\n      });\n      socket.on('disconnect', function () {\n        console.log('you have been disconnected');\n      });\n      socket.on('reconnect', function () {\n        console.log('you have been reconnected');\n      });\n      socket.on('reconnect_error', function () {\n        console.log('attempt to reconnect has failed');\n      });\n    };\n\n    this.disconnect = val => {\n      socket.emit('disconnect-patient', val.id);\n      console.log(val);\n    };\n\n    this.connect = val => {\n      socket.emit('connect-to-doctor', val.id);\n      console.log(val);\n    };\n\n    this.state = {\n      endpoint: 'http://localhost:3002',\n      Info: {}\n    };\n  }\n\n  render() {\n    return Patienthtml.call(this);\n  }\n\n}\n\nconst matchStateToProps = state => ({\n  authenticate: state.authenticate\n});\n\nexport default withRouter(connect(matchStateToProps)(Patient));","map":{"version":3,"sources":["/Users/adityarola/Downloads/covidclinicreact/src/modules/user/patient/patient.js"],"names":["Component","connect","withRouter","Patienthtml","store","socketIOClient","socket","Patient","constructor","props","getParams","query","test","slice","split","reduce","params","param","key","value","decodeURIComponent","replace","scheduleAppointment","id","state","endpoint","on","data","info","_","console","log","disconnect","val","emit","Info","render","call","matchStateToProps","authenticate"],"mappings":"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","sourcesContent":["import {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from 'react-router'\nimport Patienthtml from './patient.html'\nimport store from '../../../store/store'\n\nimport socketIOClient from \"socket.io-client\";\n\nvar socket;\nclass Patient extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            endpoint:'http://localhost:3002',\n            Info : {}\n        }\n    }\n\n    getParams = (query) =>{\n        if (!query) {\n            return { };\n        }\n    \n        return (/^[?#]/.test(query) ? query.slice(1) : query)\n        .split('&')\n        .reduce((params, param) => {\n            let [ key, value ] = param.split('=');\n            params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\n            return params;\n        }, { });\n    }\n\n    scheduleAppointment = () =>{\n        let params = this.getParams('?id=100');\n        if (!params || !params.id) {\n            return;\n        }\n        this.id = params.id;\n        socket = socketIOClient(this.state.endpoint,{query: `patient=${params.id}`});\n        socket.on('update', data => {\n            this.info = data;\n        });\n        socket.on('connect', _ => {\n            console.log(`Connected.`);\n        });\n\n        socket.on('disconnect', function () {\n            console.log('you have been disconnected');\n        });\n\n        socket.on('reconnect', function () {\n            console.log('you have been reconnected');\n        });\n\n        socket.on('reconnect_error', function () {\n            console.log('attempt to reconnect has failed');\n        });\n        \n    }\n    \n\n    disconnect = (val) =>{\n        socket.emit('disconnect-patient', val.id)\n        console.log(val);\n    }\n\n    connect = (val) =>{\n        socket.emit('connect-to-doctor', val.id)\n        console.log(val);\n    }\n\n\n    render(){\n        return Patienthtml.call(this);\n    }\n\n\n}\n\n\nconst matchStateToProps = state => ({\n    authenticate : state.authenticate\n})\n\nexport default withRouter(connect(matchStateToProps)(Patient))\n"]},"metadata":{},"sourceType":"module"}