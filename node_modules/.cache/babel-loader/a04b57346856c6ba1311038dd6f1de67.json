{"ast":null,"code":"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Operatorhtml from './operator.html';\nimport store from '../../../store/store';\nimport socketIOClient from \"socket.io-client\";\nvar socket;\n\nclass Operator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDoc = (index, key) => {\n      console.log(index);\n      let list = this.state.doctorsList;\n      list[index].status = !list[index].status;\n      this.setState({\n        doctorsList: list\n      });\n    };\n\n    this.toggle = (e, key) => {\n      if (key.toLowerCase() === 'online') {\n        this.setState({\n          status: 'Online'\n        });\n      } else {\n        this.setState({\n          status: 'Offline'\n        });\n      }\n    };\n\n    this.disconnect = val => {\n      socket.emit('disconnect-patient', val.id);\n      console.log(val);\n    };\n\n    this.connect = val => {\n      socket.emit('connect-to-doctor', val.id);\n      console.log(val);\n    };\n\n    this.renderData = () => {\n      console.log(this.state.data);\n      return null;\n    };\n\n    this.state = {\n      endpoint: 'http://localhost:3002',\n      status: 'Offline',\n      doctorsList: [{\n        id: '101',\n        name: 'Dr Test 1',\n        status: true\n      }]\n    };\n  }\n\n  componentDidMount() {\n    socket = socketIOClient(this.state.endpoint, {\n      query: `operator=${this.props.authenticate ? this.props.authenticate.info.name : 'test'}`\n    });\n    socket.on('patients', patients => {\n      this.setState({\n        data: patients\n      });\n    });\n  }\n\n  render() {\n    return Operatorhtml.call(this);\n  }\n\n}\n\nconst matchStateToProps = state => ({\n  authenticate: state.authenticate\n});\n\nexport default withRouter(connect(matchStateToProps)(Operator));","map":{"version":3,"sources":["/Users/adityarola/Downloads/covidclinicreact/src/modules/user/operator/operator.js"],"names":["Component","connect","withRouter","Operatorhtml","store","socketIOClient","socket","Operator","constructor","props","toggleDoc","index","key","console","log","list","state","doctorsList","status","setState","toggle","e","toLowerCase","disconnect","val","emit","id","renderData","data","endpoint","name","componentDidMount","query","authenticate","info","on","patients","render","call","matchStateToProps"],"mappings":"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","sourcesContent":["import {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from 'react-router'\nimport Operatorhtml from './operator.html'\nimport store from '../../../store/store'\n\nimport socketIOClient from \"socket.io-client\";\n\nvar socket;\nclass Operator extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            endpoint:'http://localhost:3002',\n            status : 'Offline',\n            doctorsList :[\n                {\n                    id:'101',\n                    name: 'Dr Test 1',\n                    status: true\n                }\n            ]\n        }\n\n         \n    }\n\n    toggleDoc = (index,key)=>{\n        console.log(index);\n        let list = this.state.doctorsList;\n        list[index].status = !list[index].status;\n        this.setState({doctorsList:list});\n        \n    }\n\n    toggle = (e,key)=>{\n        if(key.toLowerCase() === 'online'){\n            this.setState({status:'Online'});\n        }else{\n            this.setState({status:'Offline'});\n        }\n    }\n\n    disconnect = (val) =>{\n        socket.emit('disconnect-patient', val.id)\n        console.log(val);\n    }\n\n    connect = (val) =>{\n        socket.emit('connect-to-doctor', val.id)\n        console.log(val);\n    }\n\n    renderData= ()=>{\n        console.log(this.state.data);\n        return null;\n    }\n\n    componentDidMount(){\n        socket = socketIOClient(this.state.endpoint,{query: `operator=${this.props.authenticate?this.props.authenticate.info.name:'test'}`});\n        socket.on('patients',patients => {this.setState({data:patients})});\n    }\n\n    render(){\n        return Operatorhtml.call(this);\n    }\n\n\n}\n\n\nconst matchStateToProps = state => ({\n    authenticate : state.authenticate\n})\n\nexport default withRouter(connect(matchStateToProps)(Operator))\n"]},"metadata":{},"sourceType":"module"}